import random
from collections import defaultdict, Counter

def build_markov_chain(text, n=1):
    """
    Build a Markov chain model from the given text.
    
    Parameters:
    text (str): The input text to build the model from.
    n (int): The order of the Markov chain (default is 1 for single characters).

    Returns:
    dict: The Markov chain model.
    """
    # Initialize the Markov chain model
    model = defaultdict(Counter)
    
    # Tokenize the text
    tokens = text.split()
    
    # Build the model
    for i in range(len(tokens) - n):
        state = tuple(tokens[i:i+n])
        next_state = tokens[i+n]
        model[state][next_state] += 1
    
    # Convert counts to probabilities
    for state, next_states in model.items():
        total = sum(next_states.values())
        for next_state in next_states:
            next_states[next_state] /= total
    
    return model

def generate_text(model, start, length=100):
    """
    Generate text using the Markov chain model.
    
    Parameters:
    model (dict): The Markov chain model.
    start (tuple): The initial state to start the generation.
    length (int): The length of the generated text (default is 100 characters).

    Returns:
    str: The generated text.
    """
    current_state = start
    result = list(current_state)
    
    for _ in range(length):
        next_states = model[current_state]
        if not next_states:
            break
        next_state = random.choices(list(next_states.keys()), list(next_states.values()))[0]
        result.append(next_state)
        current_state = tuple(result[-len(current_state):])
    
    return ' '.join(result)

# Example usage
text = "this is a simple example of text generation using Markov chains. this example is simple and straightforward."

# Build the Markov chain model (word-based)
model = build_markov_chain(text, n=1)

# Generate new text
start_state = ("this",)
generated_text = generate_text(model, start_state, length=20)
print(generated_text)
